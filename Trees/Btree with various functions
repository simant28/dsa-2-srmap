#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#define ORDER 3
struct BTreeNode {
int keys[2 * ORDER - 1];
struct BTreeNode* children[2 * ORDER];
int n;
bool leaf;
};
struct BTreeNode* createBTree() {
struct BTreeNode* newNode = (struct BTreeNode*)malloc(sizeof(struct
BTreeNode));
if (newNode == NULL) {
perror("Memory allocation failed");
exit(1);
}
newNode->n = 0;
newNode->leaf = true;
for (int i = 0; i < 2 * ORDER; i++) {
newNode->keys[i] = 0;
newNode->children[i] = NULL;
}
return newNode;
}
void splitChild(struct BTreeNode* x, int i) {
struct BTreeNode* y = x->children[i];
struct BTreeNode* z = createBTree();
x->n++;
for (int j = x->n - 1; j > i; j--) {
x->keys[j] = x->keys[j - 1];
x->children[j + 1] = x->children[j];
}
x->keys[i] = y->keys[ORDER - 1];
x->children[i + 1] = z;
for (int j = 0; j < ORDER - 1; j++) {
z->keys[j] = y->keys[j + ORDER];
y->keys[j + ORDER] = 0;
}
y->n = ORDER - 1;

z->n = ORDER - 1;
if (!y->leaf) {
for (int j = 0; j < ORDER; j++) {
z->children[j] = y->children[j + ORDER];
y->children[j + ORDER] = NULL;
}
}
}
void insertNonFull(struct BTreeNode* x, int key) {
int i = x->n - 1;
if (x->leaf) {
while (i >= 0 && key < x->keys[i]) {
x->keys[i + 1] = x->keys[i];
i--;
}
x->keys[i + 1] = key;
x->n++;
} else {
while (i >= 0 && key < x->keys[i]) {
i--;
}
i++;
if (x->children[i]->n == 2 * ORDER - 1) {
splitChild(x, i);
if (key > x->keys[i]) {
i++;
}
}
insertNonFull(x->children[i], key);
}
}
void insert(struct BTreeNode** root, int key) {
struct BTreeNode* x = *root;
if (x->n == 2 * ORDER - 1) {
struct BTreeNode* newRoot = createBTree();
newRoot->children[0] = x;
*root = newRoot;
splitChild(newRoot, 0);
insertNonFull(newRoot, key);
} else {
insertNonFull(x, key);
}
}

void display(struct BTreeNode* root) {
if (root != NULL) {
for (int i = 0; i < root->n; i++) {
display(root->children[i]);
printf("%d ", root->keys[i]);
}
display(root->children[root->n]);
}
}
bool search(struct BTreeNode* root, int key) {
int i = 0;
while (i < root->n && key > root->keys[i]) {
i++;
}
if (i < root->n && key == root->keys[i]) {
return true;
} else if (root->leaf) {
return false;
} else {
return search(root->children[i], key);
}
}
int main() {
struct BTreeNode* root = createBTree();
int choice, key;
do {
printf("\nB-Tree Operations:\n");
printf("1. Insert a key\n");
printf("2. Search for a key\n");
printf("3. Display the B-Tree\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the key to insert: ");
scanf("%d", &key);
insert(&root, key);
break;
case 2:
printf("Enter the key to search for: ");
scanf("%d", &key);
if (search(root, key)) {
printf("%d is found in the B-tree.\n", key);
} else {

printf("%d is not found in the B-tree.\n", key);
}
break;
case 3:
printf("B-tree in-order traversal: ");
display(root);
printf("\n");
break;
case 4:
printf("Exiting the program.\n");
break;
default:
printf("Invalid choice. Please try again.\n");
}
} while (choice != 4);
free(root);
return 0;

//BY SIMANT MISHRA
