//Implement the BST with the following individual functions.
1. Create new node
2. Insert a new node to the BST
3. Pre-order, In-order, and Post-order traversal
4. Search an element from BST
5. Find the smallest and largest element from BST
6. Find the height of the BST

#include <stdio.h>
#include <stdlib.h>
struct TreeNode
{
struct TreeNode *left;
int val;
struct TreeNode *right;
};
// Function to create a new node
struct TreeNode *createNode(int data)
{
struct TreeNode *newNode = (struct TreeNode *)malloc(sizeof(struct TreeNode));
if (newNode == NULL)
{
printf("Memory Error");
return NULL;
}
// Initializing the values of the new node
newNode->val = data;
newNode->left = NULL;
newNode->right = NULL;
return newNode;
}
// Function to insert a node in the binary search tree
struct TreeNode *insert(struct TreeNode *root, int k)
{
if (root == NULL)
return createNode(k);
if (k < root->val)
root->left = insert(root->left, k);
else if (k > root->val)
root->right = insert(root->right, k);

return root;
}
// Function for in-order traversal of the binary search tree
void inorderTraversal(struct TreeNode *root)
{
if (root != NULL)
{
inorderTraversal(root->left);
printf("%d ", root->val);
inorderTraversal(root->right);
}
}
// Function to search for a given key in the binary search tree
struct TreeNode *search(struct TreeNode *root, int k)
{
if (root == NULL || root->val == k)
return root;
if (k < root->val)
return search(root->left, k);
return search(root->right, k);
}
// Function to find the smallest element in the binary search tree
int findSmallestElement(struct TreeNode *root)
{
if (root == NULL)
{
printf("The tree is empty.\n");
return -1;
}
while (root->left != NULL)
{
root = root->left;
}
return root->val;
}
// Function to find the largest element in the binary search tree
int findLargestElement(struct TreeNode *root)
{
if (root == NULL)
{

printf("The tree is empty.\n");
return -1;
}
while (root->right != NULL)
{
root = root->right;
}
return root->val;
}
// Function to find the height of the binary search tree
int findHeight(struct TreeNode *root)
{
if (root == NULL)
{
return 0;
}
else
{
int leftHeight = findHeight(root->left);
int rightHeight = findHeight(root->right);
return (leftHeight > rightHeight) ? (leftHeight + 1) : (rightHeight + 1);
}
}
// Function to display the binary search tree in order
void displayTree(struct TreeNode *root)
{
if (root != NULL)
{
displayTree(root->left);
printf("%d ", root->val);
displayTree(root->right);
}
}
int main()
{
struct TreeNode *root = NULL;
// Inserting elements into the binary search tree
root = insert(root, 50);
root = insert(root, 10);
root = insert(root, 30);

root = insert(root, 6);
root = insert(root, 8);
root = insert(root, 60);
root = insert(root, 20);
// Finding and printing the height of the binary search tree
int height = findHeight(root);
printf("The height of the BST is: %d\n", height);
// Displaying the binary search tree in order
displayTree(root);
printf("\n");
// Freeing the dynamically allocated memory
free(root->left->left);
free(root->left);
free(root->right);
free(root);
return 0;
}
//By Simant Mishra
